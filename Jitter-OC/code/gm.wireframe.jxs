<jittershader name="gm.test.jxs">
	<description>Simple geometry shader test</description>
	<param name="vp" type="vec2" state="VIEWPORT" />
	<param name="line_color" type="vec4" default="1 0 0 1" />
	<param name="width" type="float" default="1" />
	<param name="tex" type="int" default="0" />
	<language name="glsl" version="1.2">
		<bind param="vp" program="gp" />
		<bind param="line_color" program="fp" />
		<bind param="width" program="fp" />
		<bind param="tex" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

#version 120

varying vec2 texcoord0;

void main(void)
{
	gl_Position = gl_ModelViewProjectionMatrix*gl_Vertex;
	gl_FrontColor = gl_Color;
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}

]]>		
		</program>
		<program name="gp" vertices_out="3" input_type="triangle_strip" output_type="triangle_strip" type="geometry">
<![CDATA[

#version 120
#extension GL_EXT_geometry_shader4 : enable
uniform vec2 vp;
varying out vec3 distance;

varying in vec2 texcoord0[1];
varying out vec2 TC;

void main(void)
{
	vec4 pos0 = gl_PositionIn[0];
	vec4 pos1 = gl_PositionIn[1];
	vec4 pos2 = gl_PositionIn[2];
	vec3 edge = vec3(0,0,0);
	
	if(mod(gl_PrimitiveIDIn,2) == 0) edge.x = 100.;
	else edge.z = 100.;
	
	vec2 p0 = vp * pos0.xy / pos0.w;
	vec2 p1 = vp* pos1.xy / pos1.w;
	vec2 p2 = vp* pos2.xy / pos2.w;

	
	vec2 v0 = p2-p1;
	vec2 v1 = p2-p0;
	vec2 v2 = p1-p0;
	float fArea = abs(v1.x*v2.y - v1.y * v2.x);

	distance = vec3(fArea/length(v0),edge.y, edge.z);
	distance *= pos0.w;
	gl_Position = pos0;
	gl_FrontColor = gl_FrontColorIn[0];
	TC = texcoord0[0];
	EmitVertex();

	distance = vec3(edge.x,fArea/length(v1),edge.z);
	distance *= pos1.w;
	gl_Position = pos1;
	gl_FrontColor = gl_FrontColorIn[0];
	TC = texcoord0[0];
	EmitVertex();

	distance = vec3(edge.x,edge.y,fArea/length(v2));
	distance *= pos2.w;
	gl_Position = pos2;
	gl_FrontColor = gl_FrontColorIn[0];
	TC = texcoord0[0];
	EmitVertex();

	EndPrimitive();
}


]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#version 120

uniform vec4 line_color;
uniform float width;
varying vec3 distance;

varying vec2 TC;
uniform sampler2DRect tex;

void main (void)
{
	vec3 dist_vec = distance * gl_FragCoord.w;
	float fNearest = min(min(dist_vec[0],dist_vec[1]),dist_vec[2]);		
	float fEdgeIntensity = exp2(-(1.0/width)*fNearest*fNearest);
	vec4 texcolor= texture2DRect(tex,TC);
	gl_FragColor = mix(gl_Color, line_color, fEdgeIntensity);
}


]]>		
		</program>		
	</language>
</jittershader>
